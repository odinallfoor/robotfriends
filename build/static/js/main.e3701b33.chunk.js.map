{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","robots.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","username","className","src","alt","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCHSC,EAbF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,SAC5B,OACE,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,UACpD,6BACI,4BAAKN,GACL,2BAAIC,GACJ,+BAAQE,MCYPI,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIM,EAAOI,GAAGV,GACdF,KAAMQ,EAAOI,GAAGZ,KAChBC,MAAOO,EAAOI,GAAGX,MACjBE,SAAUK,EAAOI,GAAGT,cAGhC,OACI,6BACKM,EADL,MCAOK,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKZ,UAAU,OACX,2BACIA,UAAU,gCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UAC9DJ,EAAMK,WCLNlB,EAAS,CAClB,CACIN,GAAI,EACJF,KAAM,gBACNG,SAAU,OACVF,MAAO,qBAEX,CACIC,GAAI,EACJF,KAAM,eACNG,SAAU,YACVF,MAAO,qBAEX,CACIC,GAAI,EACJF,KAAM,mBACNG,SAAU,WACVF,MAAO,sBAEX,CACIC,GAAI,EACJF,KAAM,mBACNG,SAAU,WACVF,MAAO,6BAEX,CACIC,GAAI,EACJF,KAAM,mBACNG,SAAU,SACVF,MAAO,4BAEX,CACIC,GAAI,EACJF,KAAM,uBACNG,SAAU,mBACVF,MAAO,2BAEX,CACIC,GAAI,EACJF,KAAM,kBACNG,SAAU,eACVF,MAAO,0BAEX,CACIC,GAAI,EACJF,KAAM,2BACNG,SAAU,gBACVF,MAAO,wBAEX,CACIC,GAAI,EACJF,KAAM,kBACNG,SAAU,WACVF,MAAO,2BAEX,CACIC,GAAI,GACJF,KAAM,qBACNG,SAAU,iBACVF,MAAO,2BCfA0B,G,kBApCX,aAAe,IAAD,8BACV,+CAYJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAZzC,EAAKC,MAAQ,CACTzB,OAASA,EACTO,YAAa,IAJP,E,iFASVmB,MAAM,8CACNC,KAAKL,SAAS,CAACtB,OAAQA,M,+BAOjB,IAAD,EACyB2B,KAAKF,MAA5BzB,EADF,EACEA,OAAQO,EADV,EACUA,YACTqB,EAAiB5B,EAAO6B,QAAO,SAAAC,GACjC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASzB,EAAYwB,kBAEzD,OAAQ/B,EAAOiC,OAGP,yBAAKrC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcmB,KAAKP,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,OAAQ4B,MAN9B,8C,GAxBMM,cCAlBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SP4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e3701b33.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({name, email, id, username}) => {\n    return (\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n          <img src={`https://robohash.org/${id}?200x200`} alt='robot'/>\n          <div>\n              <h2>{name}</h2>\n              <p>{email}</p>\n              <label>{username}</label>\n          </div>\n      </div>\n    )\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n    const cardComponent = robots.map((user, i) => {\n        return (\n            <Card\n                key={i}\n                id={robots[i].id}\n                name={robots[i].name}\n                email={robots[i].email}\n                username={robots[i].username}\n            />)\n    });\n    return (\n        <div>\n            {cardComponent};\n        </div>\n    )\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-light-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    )\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY:'scroll', border: '5px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;\n","export const robots = [\n    {\n        id: 1,\n        name: 'Leanne Graham',\n        username: 'Bret',\n        email: 'Sincere@april.biz'\n    },\n    {\n        id: 2,\n        name: 'Ervin Howell',\n        username: 'Antonette',\n        email: 'Shanna@melissa.tv'\n    },\n    {\n        id: 3,\n        name: 'Clementine Bauch',\n        username: 'Samantha',\n        email: 'Nathan@yesenia.net'\n    },\n    {\n        id: 4,\n        name: 'Patricia Lebsack',\n        username: 'Karianne',\n        email: 'Julianne.OConner@kory.org'\n    },\n    {\n        id: 5,\n        name: 'Chelsey Dietrich',\n        username: 'Kamren',\n        email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n        id: 6,\n        name: 'Mrs. Dennis Schulist',\n        username: 'Leopoldo_Corkery',\n        email: 'Karley_Dach@jasper.info'\n    },\n    {\n        id: 7,\n        name: 'Kurtis Weissnat',\n        username: 'Elwyn.Skiles',\n        email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n        id: 8,\n        name: 'Nicholas Runolfsdottir V',\n        username: 'Maxime_Nienow',\n        email: 'Sherwood@rosamond.me'\n    },\n    {\n        id: 9,\n        name: 'Glenna Reichert',\n        username: 'Delphine',\n        email: 'Chaim_McDermott@dana.io'\n    },\n    {\n        id: 10,\n        name: 'Clementina DuBuque',\n        username: 'Moriah.Stanton',\n        email: 'Rey.Padberg@karina.biz'\n    }\n];\n","import React, {Component} from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport {robots} from \"../robots\";\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots : robots,\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        this.setState({robots: robots})\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value})\n    };\n\n    render() {\n        const {robots, searchField} = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return !robots.length ?\n            <h1>Loading...</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/>\n                    </Scroll>\n                </div>\n            );\n        }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from \"./containers/App\";\n\nReactDOM.render(<App/> ,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}